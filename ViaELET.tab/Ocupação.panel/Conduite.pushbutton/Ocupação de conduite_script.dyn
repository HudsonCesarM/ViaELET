{
  "Uuid": "8baa09c4-072f-4e9b-9d26-2aae6ff933f2",
  "IsCustomNode": false,
  "Description": "",
  "Name": "Ocupação de conduite_script",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Importando as bibliotecas necessárias\r\nimport clr\r\nclr.AddReference(\"RevitServices\")\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import FilteredElementCollector, BuiltInCategory, ElementCategoryFilter\r\n\r\n# Obtendo o documento ativo\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n# Criando um coletor para filtrar elementos da categoria de bandejas de cabos\r\ncategoria_bandeja = BuiltInCategory.OST_CableTray\r\nfiltro_categoria = ElementCategoryFilter(categoria_bandeja)\r\ncolecao_elementos = FilteredElementCollector(doc).WherePasses(filtro_categoria).WhereElementIsNotElementType().ToElements()\r\n\r\n# Inicializando uma lista para armazenar as informações dos elementos e seus cálculos de área útil\r\nelementos_com_area_util = []\r\n\r\n# Iniciando uma transação para editar os parâmetros dos elementos\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\n# Iterando sobre cada elemento para coletar, calcular e atualizar o parâmetro \"Área útil\"\r\nfor elemento in colecao_elementos:\r\n    largura = None\r\n    altura = None\r\n    \r\n    # Procurando exatamente os parâmetros \"Largura\" e \"Altura\" pelo nome\r\n    for parametro in elemento.Parameters:\r\n        nome_parametro = parametro.Definition.Name\r\n        if nome_parametro == \"Largura\":\r\n            largura = float(parametro.AsValueString())  # Convertendo para float para cálculos\r\n        elif nome_parametro == \"Altura\":\r\n            altura = float(parametro.AsValueString())\r\n    \r\n    # Calculando a \"Área útil\" se ambos os parâmetros forem encontrados\r\n    if largura is not None and altura is not None:\r\n        area_util = largura * altura * 0.2  # Multiplicando por 0,2 conforme instruído\r\n        \r\n        # Atribuindo o valor calculado ao parâmetro \"Área útil\"\r\n        for parametro in elemento.Parameters:\r\n            if parametro.Definition.Name == \"Área útil\":\r\n                parametro.Set(area_util)\r\n                elementos_com_area_util.append({\"Elemento\": elemento, \"Área útil\": area_util})  # Salvando o ID e área para referência\r\n\r\n# Finalizando a transação\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\n# Saída para confirmar os elementos processados e seus valores de \"Área útil\"\r\nOUT = elementos_com_area_util\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "44021febd6634f65a920a62838cd4fbe",
      "Inputs": [
        {
          "Id": "893c73d652e9442283d550c7a38cb563",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "dee627a9c86d40d2820f252959c01ce7",
          "Name": "OUT",
          "Description": "Resultado do script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Executa um script Python incorporado."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Importando as bibliotecas necessárias\r\nimport clr\r\nclr.AddReference(\"RevitServices\")\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import FilteredElementCollector, BuiltInCategory, ElementCategoryFilter\r\n\r\n# Obtendo o documento ativo\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n# Lista de tamanhos em ordem fixa, conforme solicitado\r\nordem_tamanhos = [\"1,5mm²\", \"2,5mm²\", \"4,0mm²\", \"6,0mm²\", \"10,0mm²\", \"16,0mm²\", \"25,0mm²\", \r\n                  \"35,0mm²\", \"50,0mm²\", \"70,0mm²\", \"95,0mm²\", \"120,0mm²\", \"150,0mm²\", \"185,0mm²\", \"240,0mm²\"]\r\n\r\n# Lista dos nomes dos parâmetros a serem verificados, organizados por tamanho, com constantes associadas diretamente\r\nparametros_por_tamanho = {\r\n    \"1,5mm²\": {\"parametros\": [\"1,5mm²_Fase A\", \"1,5mm²_Fase B\", \"1,5mm²_Fase C\", \"1,5mm²_Neutro\", \"1,5mm²_Retorno\", \"1,5mm²_Terra\"], \"constante\": 18.1},\r\n    \"2,5mm²\": {\"parametros\": [\"2,5mm²_Fase A\", \"2,5mm²_Fase B\", \"2,5mm²_Fase C\", \"2,5mm²_Neutro\", \"2,5mm²_Retorno\", \"2,5mm²_Terra\"], \"constante\": 32.17},\r\n    \"4,0mm²\": {\"parametros\": [\"4,0mm²_Fase A\", \"4,0mm²_Fase B\", \"4,0mm²_Fase C\", \"4,0mm²_Neutro\", \"4,0mm²_Retorno\", \"4,0mm²_Terra\"], \"constante\": 38.48},\r\n    \"6,0mm²\": {\"parametros\": [\"6,0mm²_Fase A\", \"6,0mm²_Fase B\", \"6,0mm²_Fase C\", \"6,0mm²_Neutro\", \"6,0mm²_Terra\"], \"constante\": 44.18},\r\n    \"10,0mm²\": {\"parametros\": [\"10,0mm²_Fase A\", \"10,0mm²_Fase B\", \"10,0mm²_Fase C\", \"10,0mm²_Neutro\", \"10,0mm²_Terra\"], \"constante\": 88.24},\r\n    \"16,0mm²\": {\"parametros\": [\"16,0mm²_Fase A\", \"16,0mm²_Fase B\", \"16,0mm²_Fase C\", \"16,0mm²_Neutro\", \"16,0mm²_Terra\"], \"constante\": 100.28},\r\n    \"25,0mm²\": {\"parametros\": [\"25,0mm²_Fase A\", \"25,0mm²_Fase B\", \"25,0mm²_Fase C\", \"25,0mm²_Neutro\", \"25,0mm²_Terra\"], \"constante\": 120.76},\r\n    \"35,0mm²\": {\"parametros\": [\"35,0mm²_Fase A\", \"35,0mm²_Fase B\", \"35,0mm²_Fase C\", \"35,0mm²_Neutro\", \"35,0mm²_Terra\"], \"constante\": 132.73},\r\n    \"50,0mm²\": {\"parametros\": [\"50,0mm²_Fase A\", \"50,0mm²_Fase B\", \"50,0mm²_Fase C\", \"50,0mm²_Neutro\", \"50,0mm²_Terra\"], \"constante\": 176.71},\r\n    \"70,0mm²\": {\"parametros\": [\"70,0mm²_Fase A\", \"70,0mm²_Fase B\", \"70,0mm²_Fase C\", \"70,0mm²_Neutro\", \"70,0mm²_Terra\"], \"constante\": 219.03},\r\n    \"95,0mm²\": {\"parametros\": [\"95,0mm²_Fase A\", \"95,0mm²_Fase B\", \"95,0mm²_Fase C\", \"95,0mm²_Neutro\", \"95,0mm²_Terra\"], \"constante\": 271.71},\r\n    \"120,0mm²\": {\"parametros\": [\"120,0mm²_Fase A\", \"120,0mm²_Fase B\", \"120,0mm²_Fase C\", \"120,0mm²_Neutro\", \"120,0mm²_Terra\"], \"constante\": 336.53},\r\n    \"150,0mm²\": {\"parametros\": [\"150,0mm²_Fase A\", \"150,0mm²_Fase B\", \"150,0mm²_Fase C\", \"150,0mm²_Neutro\", \"150,0mm²_Terra\"], \"constante\": 419.08},\r\n    \"185,0mm²\": {\"parametros\": [\"185,0mm²_Fase A\", \"185,0mm²_Fase B\", \"185,0mm²_Fase C\", \"185,0mm²_Neutro\", \"185,0mm²_Terra\"], \"constante\": 490.86},\r\n    \"240,0mm²\": {\"parametros\": [\"240,0mm²_Fase A\", \"240,0mm²_Fase B\", \"240,0mm²_Fase C\", \"240,0mm²_Neutro\", \"240,0mm²_Terra\"], \"constante\": 629}\r\n}\r\n\r\n# Coletando apenas os elementos da categoria Bandeja de Cabos\r\ncategoria_bandeja = BuiltInCategory.OST_CableTray\r\nfiltro_categoria = ElementCategoryFilter(categoria_bandeja)\r\ncolecao_elementos = FilteredElementCollector(doc).WherePasses(filtro_categoria).WhereElementIsNotElementType().ToElements()\r\n\r\n# Inicializando o contador para o parâmetro \"Trecho\"\r\ncontador_trecho = 1\r\n\r\n# Inicializando uma lista para armazenar os dados de cada elemento com a quantidade de cabos por grupo\r\nquantidade_por_elemento = []\r\n\r\n# Iniciando uma transação para editar os parâmetros dos elementos\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\n# Iterando sobre cada elemento da categoria Bandeja de Cabos para verificar os parâmetros especificados e somar os valores por tamanho de cabo\r\nfor elemento in colecao_elementos:\r\n    soma_total_multiplicada = 0  # Inicializando a soma total dos valores multiplicados\r\n    quantidade_por_grupo = {}  # Dicionário para armazenar a quantidade de cabos por grupo com valores diferentes de zero, em ordem fixa\r\n\r\n    # Iterar sobre cada grupo de tamanho de cabo, seguindo a ordem predefinida\r\n    for tamanho in ordem_tamanhos:\r\n        info = parametros_por_tamanho.get(tamanho, None)\r\n        if info:\r\n            parametros = info[\"parametros\"]\r\n            constante = info[\"constante\"]\r\n            soma_tamanho = 0  # Inicializando a soma para este tamanho de cabo\r\n\r\n            # Iterar sobre cada parâmetro dentro do tamanho\r\n            for nome_parametro in parametros:\r\n                for parametro in elemento.Parameters:\r\n                    if parametro is not None and parametro.Definition is not None:\r\n                        if parametro.Definition.Name == nome_parametro:\r\n                            # Tentativa de obter o valor do parâmetro como número\r\n                            valor_parametro = parametro.AsDouble() or parametro.AsInteger() or 0\r\n                            soma_tamanho += valor_parametro\r\n            \r\n            # Multiplicar a soma pela constante associada a esse tamanho de cabo\r\n            resultado_multiplicado = soma_tamanho * constante\r\n            soma_total_multiplicada += resultado_multiplicado\r\n\r\n            # Armazenar a quantidade calculada para o grupo atual no dicionário do elemento, somente se maior que zero\r\n            if soma_tamanho > 0:\r\n                quantidade_por_grupo[tamanho] = soma_tamanho\r\n\r\n    # Atribuir o valor total somado ao parâmetro \"Ocupação cabos\" do elemento\r\n    for parametro in elemento.Parameters:\r\n        if parametro.Definition.Name == \"Ocupação cabos\":\r\n            parametro.Set(soma_total_multiplicada)\r\n\r\n    # Construir a string para o parâmetro \"Descrição ocupação\" no formato solicitado com quantidade primeiro, ordenado por ordem_tamanhos\r\n    descricao_ocupacao = \"; \".join([\"{} x {}\".format(quantidade_por_grupo[tamanho], tamanho) for tamanho in ordem_tamanhos if tamanho in quantidade_por_grupo])\r\n\r\n    # Atribuir a string ao parâmetro \"Descrição ocupação\"\r\n    for parametro in elemento.Parameters:\r\n        if parametro.Definition.Name == \"Descrição ocupação\":\r\n            parametro.Set(descricao_ocupacao)\r\n\r\n    # Atribuir o valor sequencial ao parâmetro \"Trecho\"\r\n    for parametro in elemento.Parameters:\r\n        if parametro.Definition.Name == \"Trecho\":\r\n            parametro.Set(contador_trecho)\r\n    \r\n    # Ordenar quantidade_por_grupo com base em ordem_tamanhos e adicionar apenas os grupos com valor maior que zero\r\n    quantidade_ordenada = {tamanho: quantidade_por_grupo[tamanho] for tamanho in ordem_tamanhos if tamanho in quantidade_por_grupo}\r\n\r\n    # Adicionar os dados do elemento atual na lista de saída\r\n    quantidade_por_elemento.append({\r\n        \"ElementoID\": elemento.Id.ToString(),\r\n        \"Trecho\": contador_trecho,\r\n        \"QuantidadePorGrupo\": quantidade_ordenada,\r\n        \"Descrição ocupação\": descricao_ocupacao\r\n    })\r\n    \r\n    # Incrementar o contador de trecho\r\n    contador_trecho += 1\r\n\r\n# Finalizando a transação\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\n# Saída com a quantidade de cabos por grupo separada por elemento e organizada em ordem fixa, excluindo valores zero\r\nOUT = quantidade_por_elemento\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "9ea73b7ae7914675b249f7858f572e31",
      "Inputs": [
        {
          "Id": "731b668a786545fea4631645e809ba63",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "01a16a453b94475da6bdfff1afc41de7",
          "Name": "OUT",
          "Description": "Resultado do script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Executa um script Python incorporado."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Importando as bibliotecas necessárias\r\nimport clr\r\nclr.AddReference(\"RevitServices\")\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import FilteredElementCollector, BuiltInCategory, ElementCategoryFilter\r\n\r\n# Obtendo o documento ativo\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n# Criando um coletor para filtrar elementos da categoria de conduítes\r\ncategoria_conduite = BuiltInCategory.OST_Conduit\r\nfiltro_categoria = ElementCategoryFilter(categoria_conduite)\r\ncolecao_elementos = FilteredElementCollector(doc).WherePasses(filtro_categoria).WhereElementIsNotElementType().ToElements()\r\n\r\n# Inicializando uma lista para armazenar as informações dos elementos e seus cálculos de área útil\r\nelementos_com_area_util = []\r\n\r\n# Iniciando uma transação para editar os parâmetros dos elementos\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\n# Iterando sobre cada elemento para coletar, calcular e atualizar o parâmetro \"Área útil\"\r\nfor elemento in colecao_elementos:\r\n    diametro_interno = None\r\n    \r\n    # Procurando o parâmetro \"Diâmetro interno\" pelo nome\r\n    for parametro in elemento.Parameters:\r\n        nome_parametro = parametro.Definition.Name\r\n        if nome_parametro == \"Diâmetro interno\":\r\n            diametro_interno = float(parametro.AsValueString())  # Convertendo para float para cálculos\r\n    \r\n    # Calculando a \"Área útil\" se o parâmetro \"Diâmetro interno\" for encontrado\r\n    if diametro_interno is not None:\r\n        area_util = (3.1415 * (diametro_interno ** 2)) / 4 * 0.4  # Cálculo da área útil multiplicado por 0,4\r\n        \r\n        # Atribuindo o valor calculado ao parâmetro \"Área útil\"\r\n        for parametro in elemento.Parameters:\r\n            if parametro.Definition.Name == \"Área útil\":\r\n                parametro.Set(area_util)\r\n                elementos_com_area_util.append({\"Elemento\": elemento, \"Área útil\": area_util})  # Salvando o ID e área para referência\r\n\r\n# Finalizando a transação\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\n# Saída para confirmar os elementos processados e seus valores de \"Área útil\"\r\nOUT = elementos_com_area_util\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "06bef8eabc9e4669a838485db9f7d92c",
      "Inputs": [
        {
          "Id": "5efc8bdbba3e49f496073d33ae67d77c",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e1c7de154b144f3ca6e475c5c92b5c13",
          "Name": "OUT",
          "Description": "Resultado do script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Executa um script Python incorporado."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Importando as bibliotecas necessárias\r\nimport clr\r\nclr.AddReference(\"RevitServices\")\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import FilteredElementCollector, BuiltInCategory, ElementCategoryFilter\r\n\r\n# Obtendo o documento ativo\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n# Lista de tamanhos em ordem fixa, conforme solicitado\r\nordem_tamanhos = [\"1,5mm²\", \"2,5mm²\", \"4,0mm²\", \"6,0mm²\", \"10,0mm²\", \"16,0mm²\", \"25,0mm²\", \r\n                  \"35,0mm²\", \"50,0mm²\", \"70,0mm²\", \"95,0mm²\", \"120,0mm²\", \"150,0mm²\", \"185,0mm²\", \"240,0mm²\"]\r\n\r\n# Lista dos nomes dos parâmetros a serem verificados, organizados por tamanho, com constantes associadas diretamente\r\nparametros_por_tamanho = {\r\n    \"1,5mm²\": {\"parametros\": [\"1,5mm²_Fase A\", \"1,5mm²_Fase B\", \"1,5mm²_Fase C\", \"1,5mm²_Neutro\", \"1,5mm²_Retorno\", \"1,5mm²_Terra\"], \"constante\": 18.1},\r\n    \"2,5mm²\": {\"parametros\": [\"2,5mm²_Fase A\", \"2,5mm²_Fase B\", \"2,5mm²_Fase C\", \"2,5mm²_Neutro\", \"2,5mm²_Retorno\", \"2,5mm²_Terra\"], \"constante\": 32.17},\r\n    \"4,0mm²\": {\"parametros\": [\"4,0mm²_Fase A\", \"4,0mm²_Fase B\", \"4,0mm²_Fase C\", \"4,0mm²_Neutro\", \"4,0mm²_Retorno\", \"4,0mm²_Terra\"], \"constante\": 38.48},\r\n    \"6,0mm²\": {\"parametros\": [\"6,0mm²_Fase A\", \"6,0mm²_Fase B\", \"6,0mm²_Fase C\", \"6,0mm²_Neutro\", \"6,0mm²_Terra\"], \"constante\": 44.18},\r\n    \"10,0mm²\": {\"parametros\": [\"10,0mm²_Fase A\", \"10,0mm²_Fase B\", \"10,0mm²_Fase C\", \"10,0mm²_Neutro\", \"10,0mm²_Terra\"], \"constante\": 88.24},\r\n    \"16,0mm²\": {\"parametros\": [\"16,0mm²_Fase A\", \"16,0mm²_Fase B\", \"16,0mm²_Fase C\", \"16,0mm²_Neutro\", \"16,0mm²_Terra\"], \"constante\": 100.28},\r\n    \"25,0mm²\": {\"parametros\": [\"25,0mm²_Fase A\", \"25,0mm²_Fase B\", \"25,0mm²_Fase C\", \"25,0mm²_Neutro\", \"25,0mm²_Terra\"], \"constante\": 120.76},\r\n    \"35,0mm²\": {\"parametros\": [\"35,0mm²_Fase A\", \"35,0mm²_Fase B\", \"35,0mm²_Fase C\", \"35,0mm²_Neutro\", \"35,0mm²_Terra\"], \"constante\": 132.73},\r\n    \"50,0mm²\": {\"parametros\": [\"50,0mm²_Fase A\", \"50,0mm²_Fase B\", \"50,0mm²_Fase C\", \"50,0mm²_Neutro\", \"50,0mm²_Terra\"], \"constante\": 176.71},\r\n    \"70,0mm²\": {\"parametros\": [\"70,0mm²_Fase A\", \"70,0mm²_Fase B\", \"70,0mm²_Fase C\", \"70,0mm²_Neutro\", \"70,0mm²_Terra\"], \"constante\": 219.03},\r\n    \"95,0mm²\": {\"parametros\": [\"95,0mm²_Fase A\", \"95,0mm²_Fase B\", \"95,0mm²_Fase C\", \"95,0mm²_Neutro\", \"95,0mm²_Terra\"], \"constante\": 271.71},\r\n    \"120,0mm²\": {\"parametros\": [\"120,0mm²_Fase A\", \"120,0mm²_Fase B\", \"120,0mm²_Fase C\", \"120,0mm²_Neutro\", \"120,0mm²_Terra\"], \"constante\": 336.53},\r\n    \"150,0mm²\": {\"parametros\": [\"150,0mm²_Fase A\", \"150,0mm²_Fase B\", \"150,0mm²_Fase C\", \"150,0mm²_Neutro\", \"150,0mm²_Terra\"], \"constante\": 419.08},\r\n    \"185,0mm²\": {\"parametros\": [\"185,0mm²_Fase A\", \"185,0mm²_Fase B\", \"185,0mm²_Fase C\", \"185,0mm²_Neutro\", \"185,0mm²_Terra\"], \"constante\": 490.86},\r\n    \"240,0mm²\": {\"parametros\": [\"240,0mm²_Fase A\", \"240,0mm²_Fase B\", \"240,0mm²_Fase C\", \"240,0mm²_Neutro\", \"240,0mm²_Terra\"], \"constante\": 629}\r\n}\r\n\r\n# Coletando apenas os elementos da categoria Conduítes\r\ncategoria_conduite = BuiltInCategory.OST_Conduit\r\nfiltro_categoria = ElementCategoryFilter(categoria_conduite)\r\ncolecao_elementos = FilteredElementCollector(doc).WherePasses(filtro_categoria).WhereElementIsNotElementType().ToElements()\r\n\r\n# Inicializando o contador para o parâmetro \"Trecho\"\r\ncontador_trecho = 1\r\n\r\n# Inicializando uma lista para armazenar os dados de cada elemento com a quantidade de cabos por grupo\r\nquantidade_por_elemento = []\r\n\r\n# Iniciando uma transação para editar os parâmetros dos elementos\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\n# Iterando sobre cada elemento da categoria Conduítes para verificar os parâmetros especificados e somar os valores por tamanho de cabo\r\nfor elemento in colecao_elementos:\r\n    soma_total_multiplicada = 0  # Inicializando a soma total dos valores multiplicados\r\n    quantidade_por_grupo = {}  # Dicionário para armazenar a quantidade de cabos por grupo com valores diferentes de zero, em ordem fixa\r\n\r\n    # Iterar sobre cada grupo de tamanho de cabo, seguindo a ordem predefinida\r\n    for tamanho in ordem_tamanhos:\r\n        info = parametros_por_tamanho.get(tamanho, None)\r\n        if info:\r\n            parametros = info[\"parametros\"]\r\n            constante = info[\"constante\"]\r\n            soma_tamanho = 0  # Inicializando a soma para este tamanho de cabo\r\n\r\n            # Iterar sobre cada parâmetro dentro do tamanho\r\n            for nome_parametro in parametros:\r\n                parametro = elemento.LookupParameter(nome_parametro)\r\n                if parametro:\r\n                    valor_parametro = parametro.AsDouble() or parametro.AsInteger() or 0\r\n                    soma_tamanho += valor_parametro\r\n            \r\n            # Multiplicar a soma pela constante associada a esse tamanho de cabo\r\n            resultado_multiplicado = soma_tamanho * constante\r\n            soma_total_multiplicada += resultado_multiplicado\r\n\r\n            # Armazenar a quantidade calculada para o grupo atual no dicionário do elemento, somente se maior que zero\r\n            if soma_tamanho > 0:\r\n                quantidade_por_grupo[tamanho] = soma_tamanho\r\n\r\n    # Atribuir o valor total somado ao parâmetro \"Ocupação cabos\" do elemento\r\n    parametro_ocupacao = elemento.LookupParameter(\"Ocupação cabos\")\r\n    if parametro_ocupacao and parametro_ocupacao.AsDouble() != soma_total_multiplicada:\r\n        parametro_ocupacao.Set(soma_total_multiplicada)\r\n\r\n    # Construir a string para o parâmetro \"Descrição ocupação\" no formato solicitado com quantidade primeiro, ordenado por ordem_tamanhos\r\n    descricao_ocupacao = \"; \".join([\"{} x {}\".format(quantidade_por_grupo[tamanho], tamanho) for tamanho in ordem_tamanhos if tamanho in quantidade_por_grupo])\r\n\r\n    # Atribuir a string ao parâmetro \"Descrição ocupação\"\r\n    parametro_descricao = elemento.LookupParameter(\"Descrição ocupação\")\r\n    if parametro_descricao and parametro_descricao.AsString() != descricao_ocupacao:\r\n        parametro_descricao.Set(descricao_ocupacao)\r\n\r\n    # Atribuir o valor sequencial ao parâmetro \"Trecho\"\r\n    parametro_trecho = elemento.LookupParameter(\"Trecho\")\r\n    if parametro_trecho and parametro_trecho.AsInteger() != contador_trecho:\r\n        parametro_trecho.Set(contador_trecho)\r\n    \r\n    # Ordenar quantidade_por_grupo com base em ordem_tamanhos e adicionar apenas os grupos com valor maior que zero\r\n    quantidade_ordenada = {tamanho: quantidade_por_grupo[tamanho] for tamanho in ordem_tamanhos if tamanho in quantidade_por_grupo}\r\n\r\n    # Adicionar os dados do elemento atual na lista de saída\r\n    quantidade_por_elemento.append({\r\n        \"ElementoID\": elemento.Id.ToString(),\r\n        \"Trecho\": contador_trecho,\r\n        \"QuantidadePorGrupo\": quantidade_ordenada,\r\n        \"Descrição ocupação\": descricao_ocupacao\r\n    })\r\n    \r\n    # Incrementar o contador de trecho\r\n    contador_trecho += 1\r\n\r\n# Finalizando a transação\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\n# Saída com a quantidade de cabos por grupo separada por elemento e organizada em ordem fixa, excluindo valores zero\r\nOUT = quantidade_por_elemento\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "b596c19df7644eff9fe4028d38146e56",
      "Inputs": [
        {
          "Id": "936fc46b8ce0450fa6eba144be1b0dbd",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5eb9f02faae744a08418623c9778c45f",
          "Name": "OUT",
          "Description": "Resultado do script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Executa um script Python incorporado."
    }
  ],
  "Connectors": [],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.13",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "2.0",
      "Data": {}
    }
  ],
  "Author": "",
  "Linting": {
    "activeLinter": "Nenhum",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.13.1.3887",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Visualização do plano de fundo",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Id": "44021febd6634f65a920a62838cd4fbe",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Python Script",
        "ShowGeometry": true,
        "Excluded": true,
        "X": 187.7753273859073,
        "Y": 785.51172326305914
      },
      {
        "Id": "9ea73b7ae7914675b249f7858f572e31",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Python Script",
        "ShowGeometry": true,
        "Excluded": true,
        "X": 415.58490575193048,
        "Y": 787.94449161060152
      },
      {
        "Id": "06bef8eabc9e4669a838485db9f7d92c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Python Script",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 679.50079988415223,
        "Y": 788.56850083687721
      },
      {
        "Id": "b596c19df7644eff9fe4028d38146e56",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Python Script",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 929.44122651186217,
        "Y": 787.517551074148
      }
    ],
    "Annotations": [
      {
        "Id": "81e07d35bf1b45c9b2dd004dd19387bc",
        "Title": "área util bandeja",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [],
        "HasNestedGroups": false,
        "Left": 204.79080452024192,
        "Top": 742.223777579477,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "fbf57213d36b433fa6b14c9883526a13",
        "Title": "área util coduite",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [],
        "HasNestedGroups": false,
        "Left": 698.45736416250838,
        "Top": 745.21591873254158,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "8f96b142f7924e31b5ef5c88ca32bcf4",
        "Title": "cabos bandeja",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [],
        "HasNestedGroups": false,
        "Left": 441.4693129695118,
        "Top": 738.62145203271632,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "080c3559bb10481bb91fb4b8be292a52",
        "Title": "cabos conduite",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [],
        "HasNestedGroups": false,
        "Left": 940.8914738831586,
        "Top": 724.13752424506447,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      }
    ],
    "X": -130.11210805842205,
    "Y": -322.9491565209571,
    "Zoom": 0.7268637065196939
  }
}